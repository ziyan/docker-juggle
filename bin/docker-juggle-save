#!/usr/bin/env python

import subprocess
import argparse
import sys
import os
import tempfile
import shutil

NAME = os.path.basename(sys.argv[0])

def get_image_history(image):
    output = subprocess.check_output(['docker', 'history', '-q', '--no-trunc', image])
    images = filter(None, output.split())
    assert len(images) > 0
    return images

def save_image(image, tmp=None):
    subprocess.check_call(['docker', 'save', '-o', os.path.join(tmp, image + '.tar'), image])

    directory = os.path.join(tmp, image)
    subprocess.check_call(['mkdir', '-p', directory])
    subprocess.check_call(['tar', '-xpf', os.path.join(tmp, image + '.tar'), '-C', directory])

    # unpack all layers
    for subdirectory in os.listdir(directory):
        subdirectory = os.path.join(directory, subdirectory)
        if not os.path.isdir(subdirectory):
            continue
        os.makedirs(os.path.join(subdirectory, 'layer'))
        subprocess.check_call(['tar', '-xpf', os.path.join(subdirectory, 'layer.tar'), '-C', os.path.join(subdirectory, 'layer')])

    return directory

def compress_layer(layer, layer_directory, image_directory, base_directory):

    for dirpath, dirnames, filenames in os.walk(os.path.join(image_directory, layer, 'layer')):
        pass

def create_diff(tmp, image_history, image_directory, base_history, base_directory):
    diff_directory = os.path.join(tmp, 'diff')
    os.makedirs(diff_directory)

    for layer in reversed(image_history):
        layer_directory = os.path.join(diff_directory, layer)
        os.makedirs(layer_directory)

        # copy meta data
        for filename in ['json', 'VERSION']:
            shutil.copyfile(os.path.join(image_directory, layer, filename), os.path.join(layer_directory, filename))

        # if layer is the same in both images
        # only create the layer directory with meta data
        if layer in base_history:
            assert image_history.index(layer) == base_history.index(layer)
            continue

        compress_layer(layer, layer_directory, image_directory, base_directory)

    return diff_directory

def run(image, base, tmp=None, output=None):

    # get history of images
    image_history = get_image_history(image)
    base_history = get_image_history(base)

    # create a tmp directory for us to work in
    #if not tmp:
    #    tmp = tempfile.mkdtemp(prefix=NAME + '-')

    # save the images
    #image_directory = save_image(image_history[0], tmp=tmp)
    #base_directory = save_image(base_history[0], tmp=tmp)
    tmp = '/tmp/docker-juggle-save-toG8Pq'
    image_directory = '/tmp/docker-juggle-save-toG8Pq/873134e7ad65231d999060436395b218a2a14237af1816677b9e83075188785d'
    base_directory = '/tmp/docker-juggle-save-toG8Pq/c4c3752af388b4d459fd93e1ecff9a91265c8eabf365bcf84c4ee2d80923cbe3'

    # create diff
    diff_directory = create_diff(tmp, image_history, image_directory, base_history, base_directory)

    # package

    # remove tmp folder
    # shutil.rmtree(tmp, ignore_errors=True)

def main():

    # parse argument
    parser = argparse.ArgumentParser(description='Juggle docker image between hosts. Export docker image diffs.')
    parser.add_argument('image', type=str, help='image tag')
    parser.add_argument('base', type=str, help='base image tag')
    parser.add_argument('--tmp', dest='tmp', type=str, help='temporary directory')
    parser.add_argument('--output', dest='output', type=str, help='output tar archive')
    args = parser.parse_args()

    # in order to preserve user and group info, we need to run as root
    if not os.geteuid() == 0:
        sys.stderr.write('%s: are you root? in order to preserve user and group info, root privilege is needed.\n' % NAME)
        sys.exit(-1)

    run(args.image, args.base, args.tmp, args.output)

if __name__ == '__main__':
    main()

